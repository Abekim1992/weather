{"ast":null,"code":"import { DateTime } from 'luxon';\nconst API_KEY = \"07b14f5db44c4799651bef7007e8f64a\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\"; // https://api.openweathermap.org/data/2.5/forecast?lat=51.5085&lon=0.1257?appid=07b14f5db44c4799651bef7007e8f64a\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\n\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_max,\n    temp_min,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\n\nconst formatForecastWeather = data => {\n  console.log(data);\n  let {\n    list\n  } = data;\n  let daily = list.slice(1, 6).map(d => {\n    return {\n      temp: d.main.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  let hourly = city.slice(1, 6).map(d => {\n    return {\n      temp: d.main.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    daily,\n    hourly\n  };\n};\n\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData('weather', searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  const formattedForecastWeather = await getWeatherData('forecast', {\n    lat,\n    lon,\n    units: \"metric\"\n  }).then(formatForecastWeather);\n  return { ...formattedCurrentWeather,\n    ...formattedForecastWeather\n  };\n}; // const formatToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local Time: 'hh:mm a\") => \n// DateTime.fromSeconds(secs).setZone(zone).toFormate(format)\n\n\nconst iconUrlFromCode = code => `http://openweathermap.org/img/wn/${code}@2x.png`;\n\nexport default getFormattedWeatherData;\nexport { iconUrlFromCode };","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","console","log","list","daily","slice","map","d","hourly","city","getFormattedWeatherData","formattedCurrentWeather","formattedForecastWeather","units","iconUrlFromCode","code"],"sources":["/Users/abe/Desktop/JS/react-weather/weather/src/services/weatherServices.js"],"sourcesContent":["import { DateTime } from 'luxon'\nconst API_KEY = \"07b14f5db44c4799651bef7007e8f64a\"\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\"\n\n// https://api.openweathermap.org/data/2.5/forecast?lat=51.5085&lon=0.1257?appid=07b14f5db44c4799651bef7007e8f64a\n\n\nconst getWeatherData = (infoType, searchParams) => {\n    const url =  new URL(BASE_URL + \"/\" + infoType);\n    url.search = new URLSearchParams({...searchParams, appid: API_KEY})\n\n    return fetch(url)\n    .then((res) => res.json())\n}\n \nconst formatCurrentWeather = (data) => {\n    const{\n        coord: {lat, lon},\n        main: {temp, feels_like, temp_min, temp_max, humidity},\n        name,\n        dt,\n        sys: {country, sunrise, sunset},\n        weather,\n        wind: {speed}\n    } = data\n\n    const {main: details, icon} = weather[0]\n\n    return {lat, lon, temp, feels_like, temp_max, temp_min, humidity, name, dt, country, sunrise, sunset, details, icon, speed}\n}\n\nconst formatForecastWeather = (data) => {\n    console.log(data)\n    let { list } = data;\n    let daily = list.slice(1, 6).map((d) => {\n        return {\n            temp: d.main.temp,\n            icon: d.weather[0].icon\n        }\n    })\n    let hourly = city.slice(1, 6).map((d) => {\n        return {\n            temp: d.main.temp,\n            icon: d.weather[0].icon\n        }\n    })\n    return {daily, hourly}\n}\nconst getFormattedWeatherData = async (searchParams) => {\n    const formattedCurrentWeather = await getWeatherData\n    ('weather', searchParams).then(formatCurrentWeather)\n\n    const {lat, lon} = formattedCurrentWeather\n\n    const formattedForecastWeather = await getWeatherData('forecast', {\n        lat, lon, units: \"metric\"\n    }).then(formatForecastWeather)\n\n    return {...formattedCurrentWeather, ...formattedForecastWeather}\n}\n\n// const formatToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local Time: 'hh:mm a\") => \n// DateTime.fromSeconds(secs).setZone(zone).toFormate(format)\nconst iconUrlFromCode = (code) => `http://openweathermap.org/img/wn/${code}@2x.png`\n\nexport default getFormattedWeatherData \n\nexport { iconUrlFromCode}"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,MAAMC,OAAO,GAAG,kCAAhB;AACA,MAAMC,QAAQ,GAAG,yCAAjB,C,CAEA;;AAGA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;EAC/C,MAAMC,GAAG,GAAI,IAAIC,GAAJ,CAAQL,QAAQ,GAAG,GAAX,GAAiBE,QAAzB,CAAb;EACAE,GAAG,CAACE,MAAJ,GAAa,IAAIC,eAAJ,CAAoB,EAAC,GAAGJ,YAAJ;IAAkBK,KAAK,EAAET;EAAzB,CAApB,CAAb;EAEA,OAAOU,KAAK,CAACL,GAAD,CAAL,CACNM,IADM,CACAC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADR,CAAP;AAEH,CAND;;AAQA,MAAMC,oBAAoB,GAAIC,IAAD,IAAU;EACnC,MAAK;IACDC,KAAK,EAAE;MAACC,GAAD;MAAMC;IAAN,CADN;IAEDC,IAAI,EAAE;MAACC,IAAD;MAAOC,UAAP;MAAmBC,QAAnB;MAA6BC,QAA7B;MAAuCC;IAAvC,CAFL;IAGDC,IAHC;IAIDC,EAJC;IAKDC,GAAG,EAAE;MAACC,OAAD;MAAUC,OAAV;MAAmBC;IAAnB,CALJ;IAMDC,OANC;IAODC,IAAI,EAAE;MAACC;IAAD;EAPL,IAQDlB,IARJ;EAUA,MAAM;IAACI,IAAI,EAAEe,OAAP;IAAgBC;EAAhB,IAAwBJ,OAAO,CAAC,CAAD,CAArC;EAEA,OAAO;IAACd,GAAD;IAAMC,GAAN;IAAWE,IAAX;IAAiBC,UAAjB;IAA6BE,QAA7B;IAAuCD,QAAvC;IAAiDE,QAAjD;IAA2DC,IAA3D;IAAiEC,EAAjE;IAAqEE,OAArE;IAA8EC,OAA9E;IAAuFC,MAAvF;IAA+FI,OAA/F;IAAwGC,IAAxG;IAA8GF;EAA9G,CAAP;AACH,CAdD;;AAgBA,MAAMG,qBAAqB,GAAIrB,IAAD,IAAU;EACpCsB,OAAO,CAACC,GAAR,CAAYvB,IAAZ;EACA,IAAI;IAAEwB;EAAF,IAAWxB,IAAf;EACA,IAAIyB,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBC,GAAjB,CAAsBC,CAAD,IAAO;IACpC,OAAO;MACHvB,IAAI,EAAEuB,CAAC,CAACxB,IAAF,CAAOC,IADV;MAEHe,IAAI,EAAEQ,CAAC,CAACZ,OAAF,CAAU,CAAV,EAAaI;IAFhB,CAAP;EAIH,CALW,CAAZ;EAMA,IAAIS,MAAM,GAAGC,IAAI,CAACJ,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBC,GAAjB,CAAsBC,CAAD,IAAO;IACrC,OAAO;MACHvB,IAAI,EAAEuB,CAAC,CAACxB,IAAF,CAAOC,IADV;MAEHe,IAAI,EAAEQ,CAAC,CAACZ,OAAF,CAAU,CAAV,EAAaI;IAFhB,CAAP;EAIH,CALY,CAAb;EAMA,OAAO;IAACK,KAAD;IAAQI;EAAR,CAAP;AACH,CAhBD;;AAiBA,MAAME,uBAAuB,GAAG,MAAO1C,YAAP,IAAwB;EACpD,MAAM2C,uBAAuB,GAAG,MAAM7C,cAAc,CACnD,SADmD,EACxCE,YADwC,CAAd,CACZO,IADY,CACPG,oBADO,CAAtC;EAGA,MAAM;IAACG,GAAD;IAAMC;EAAN,IAAa6B,uBAAnB;EAEA,MAAMC,wBAAwB,GAAG,MAAM9C,cAAc,CAAC,UAAD,EAAa;IAC9De,GAD8D;IACzDC,GADyD;IACpD+B,KAAK,EAAE;EAD6C,CAAb,CAAd,CAEpCtC,IAFoC,CAE/ByB,qBAF+B,CAAvC;EAIA,OAAO,EAAC,GAAGW,uBAAJ;IAA6B,GAAGC;EAAhC,CAAP;AACH,CAXD,C,CAaA;AACA;;;AACA,MAAME,eAAe,GAAIC,IAAD,IAAW,oCAAmCA,IAAK,SAA3E;;AAEA,eAAeL,uBAAf;AAEA,SAASI,eAAT"},"metadata":{},"sourceType":"module"}