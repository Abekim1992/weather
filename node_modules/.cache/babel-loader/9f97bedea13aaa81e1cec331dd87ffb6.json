{"ast":null,"code":"import { DateTime } from 'luxon';\nconst API_KEY = \"07b14f5db44c4799651bef7007e8f64a\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\n\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidty\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_max,\n    temp_min,\n    humidty,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\n\nconst formatForcastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, 'ccc'),\n      temp: d.temp.day,\n      icon: d.weather\n    };\n  });\n};\n\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData('weather', searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formatCurrentWeather;\n  const formattedForecastWeather = await getWeatherData('onecall', {\n    lat,\n    lon,\n    exclude: 'current, minutely, alerts',\n    units: searchParams.units\n  }).then(formatForcastWeather);\n  return formattedCurrentWeather;\n};\n\nconst formatToLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL yyyy' | Local Time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormate(format);\n};\n\nexport default getFormattedWeatherData;","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidty","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForcastWeather","timezone","daily","hourly","slice","map","d","title","formatToLocalTime","day","getFormattedWeatherData","formattedCurrentWeather","formattedForecastWeather","exclude","units","secs","zone","format","fromSeconds","setZone","toFormate"],"sources":["/Users/abe/Desktop/JS/react-weather/weather/src/services/weatherServices.js"],"sourcesContent":["import { DateTime } from 'luxon'\nconst API_KEY = \"07b14f5db44c4799651bef7007e8f64a\"\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\"\n\nconst getWeatherData = (infoType, searchParams) => {\n    const url =  new URL(BASE_URL + \"/\" + infoType);\n    url.search = new URLSearchParams({...searchParams, appid: API_KEY})\n\n    return fetch(url)\n    .then((res) => res.json())\n    \n}\n \nconst formatCurrentWeather = (data) => {\n    const{\n        coord: {lat, lon},\n        main: {temp, feels_like, temp_min, temp_max, humidty},\n        name,\n        dt,\n        sys: {country, sunrise, sunset},\n        weather,\n        wind: {speed}\n    } = data\n\n    const {main: details, icon} = weather[0]\n\n    return {lat, lon, temp, feels_like, temp_max, temp_min, humidty, name, dt, country, sunrise, sunset, details, icon, speed}\n}\n\nconst formatForcastWeather = (data) => {\n    let { timezone, daily, hourly } = data;\n    daily = daily.slice(1,6).map(d => {\n        return {\n            title: formatToLocalTime(d.dt, timezone, 'ccc'),\n            temp: d.temp.day,\n            icon: d.weather\n        }\n    })\n}\nconst getFormattedWeatherData = async (searchParams) => {\n    const formattedCurrentWeather = await getWeatherData\n    ('weather', searchParams).then(formatCurrentWeather)\n\n    const {lat, lon} = formatCurrentWeather\n\n    const formattedForecastWeather = await getWeatherData('onecall', {\n        lat, lon, exclude: 'current, minutely, alerts', units: searchParams.units\n    }).then(formatForcastWeather)\n\n    return formattedCurrentWeather\n}\n\nconst formatToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local Time: 'hh:mm a\") => \nDateTime.fromSeconds(secs).setZone(zone).toFormate(format)\n\nexport default getFormattedWeatherData "],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,MAAMC,OAAO,GAAG,kCAAhB;AACA,MAAMC,QAAQ,GAAG,yCAAjB;;AAEA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;EAC/C,MAAMC,GAAG,GAAI,IAAIC,GAAJ,CAAQL,QAAQ,GAAG,GAAX,GAAiBE,QAAzB,CAAb;EACAE,GAAG,CAACE,MAAJ,GAAa,IAAIC,eAAJ,CAAoB,EAAC,GAAGJ,YAAJ;IAAkBK,KAAK,EAAET;EAAzB,CAApB,CAAb;EAEA,OAAOU,KAAK,CAACL,GAAD,CAAL,CACNM,IADM,CACAC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADR,CAAP;AAGH,CAPD;;AASA,MAAMC,oBAAoB,GAAIC,IAAD,IAAU;EACnC,MAAK;IACDC,KAAK,EAAE;MAACC,GAAD;MAAMC;IAAN,CADN;IAEDC,IAAI,EAAE;MAACC,IAAD;MAAOC,UAAP;MAAmBC,QAAnB;MAA6BC,QAA7B;MAAuCC;IAAvC,CAFL;IAGDC,IAHC;IAIDC,EAJC;IAKDC,GAAG,EAAE;MAACC,OAAD;MAAUC,OAAV;MAAmBC;IAAnB,CALJ;IAMDC,OANC;IAODC,IAAI,EAAE;MAACC;IAAD;EAPL,IAQDlB,IARJ;EAUA,MAAM;IAACI,IAAI,EAAEe,OAAP;IAAgBC;EAAhB,IAAwBJ,OAAO,CAAC,CAAD,CAArC;EAEA,OAAO;IAACd,GAAD;IAAMC,GAAN;IAAWE,IAAX;IAAiBC,UAAjB;IAA6BE,QAA7B;IAAuCD,QAAvC;IAAiDE,OAAjD;IAA0DC,IAA1D;IAAgEC,EAAhE;IAAoEE,OAApE;IAA6EC,OAA7E;IAAsFC,MAAtF;IAA8FI,OAA9F;IAAuGC,IAAvG;IAA6GF;EAA7G,CAAP;AACH,CAdD;;AAgBA,MAAMG,oBAAoB,GAAIrB,IAAD,IAAU;EACnC,IAAI;IAAEsB,QAAF;IAAYC,KAAZ;IAAmBC;EAAnB,IAA8BxB,IAAlC;EACAuB,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAc,CAAd,EAAiBC,GAAjB,CAAqBC,CAAC,IAAI;IAC9B,OAAO;MACHC,KAAK,EAAEC,iBAAiB,CAACF,CAAC,CAAChB,EAAH,EAAOW,QAAP,EAAiB,KAAjB,CADrB;MAEHjB,IAAI,EAAEsB,CAAC,CAACtB,IAAF,CAAOyB,GAFV;MAGHV,IAAI,EAAEO,CAAC,CAACX;IAHL,CAAP;EAKH,CANO,CAAR;AAOH,CATD;;AAUA,MAAMe,uBAAuB,GAAG,MAAO1C,YAAP,IAAwB;EACpD,MAAM2C,uBAAuB,GAAG,MAAM7C,cAAc,CACnD,SADmD,EACxCE,YADwC,CAAd,CACZO,IADY,CACPG,oBADO,CAAtC;EAGA,MAAM;IAACG,GAAD;IAAMC;EAAN,IAAaJ,oBAAnB;EAEA,MAAMkC,wBAAwB,GAAG,MAAM9C,cAAc,CAAC,SAAD,EAAY;IAC7De,GAD6D;IACxDC,GADwD;IACnD+B,OAAO,EAAE,2BAD0C;IACbC,KAAK,EAAE9C,YAAY,CAAC8C;EADP,CAAZ,CAAd,CAEpCvC,IAFoC,CAE/ByB,oBAF+B,CAAvC;EAIA,OAAOW,uBAAP;AACH,CAXD;;AAaA,MAAMH,iBAAiB,GAAG,UAACO,IAAD,EAAOC,IAAP;EAAA,IAAaC,MAAb,uEAAsB,2CAAtB;EAAA,OAC1BtD,QAAQ,CAACuD,WAAT,CAAqBH,IAArB,EAA2BI,OAA3B,CAAmCH,IAAnC,EAAyCI,SAAzC,CAAmDH,MAAnD,CAD0B;AAAA,CAA1B;;AAGA,eAAeP,uBAAf"},"metadata":{},"sourceType":"module"}